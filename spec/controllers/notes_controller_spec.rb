require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe NotesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Note. As you add validations to Note, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { text: 'test', url: 'http://stackoverflow.com/questions/24682671/how-to-complete-the-rspec-put-controller-test-from-scaffold' }
  }

  let(:invalid_attributes) {
    { text: '' }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # NotesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all notes as @notes" do
      note = Note.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(assigns(:notes)).to eq([note])
    end
  end

  describe "GET #show" do
    it "assigns the requested note as @note" do
      note = Note.create! valid_attributes
      get :show, params: {id: note.to_param}, session: valid_session
      expect(assigns(:note)).to eq(note)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Note" do
        expect {
          post :create, params: {note: valid_attributes}, session: valid_session
        }.to change(Note, :count).by(1)
      end

      it "assigns a newly created note as @note" do
        post :create, params: {note: valid_attributes}, session: valid_session
        expect(assigns(:note)).to be_a(Note)
        expect(assigns(:note)).to be_persisted
      end

      it "return 201 Created" do
        post :create, params: {note: valid_attributes}, session: valid_session
        expect(response).to have_http_status(201)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved note as @note" do
        post :create, params: {note: invalid_attributes}, session: valid_session
        expect(assigns(:note)).to be_a_new(Note)
      end

      it "returns 422 Unprocessable Entity" do
        post :create, params: {note: invalid_attributes}, session: valid_session
        expect(response).to have_http_status(422)
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        { text: 'tested', url: '' }
      }

      it "updates the requested note" do
        note = Note.create! valid_attributes
        put :update, params: {id: note.to_param, note: new_attributes}, session: valid_session
        note.reload
        expect('tested').to eq(note.text)
        expect('').to eq(note.url)
      end

      it "assigns the requested note as @note" do
        note = Note.create! valid_attributes
        put :update, params: {id: note.to_param, note: valid_attributes}, session: valid_session
        expect(assigns(:note)).to eq(note)
      end

      it "returns 200 OK" do
        note = Note.create! valid_attributes
        put :update, params: {id: note.to_param, note: valid_attributes}, session: valid_session
        expect(response).to have_http_status(200)
      end
    end

    context "with invalid params" do
      it "assigns the note as @note" do
        note = Note.create! valid_attributes
        put :update, params: {id: note.to_param, note: invalid_attributes}, session: valid_session
        expect(assigns(:note)).to eq(note)
      end

      it "returns 422 Unprocessable Entity" do
        note = Note.create! valid_attributes
        put :update, params: {id: note.to_param, note: invalid_attributes}, session: valid_session
        expect(response).to have_http_status(422)
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested note" do
      note = Note.create! valid_attributes
      expect {
        delete :destroy, params: {id: note.to_param}, session: valid_session
      }.to change(Note, :count).by(-1)
    end

    it "returns 204 No content" do
      note = Note.create! valid_attributes
      delete :destroy, params: {id: note.to_param}, session: valid_session
      expect(response).to have_http_status(204)
    end
  end

end
